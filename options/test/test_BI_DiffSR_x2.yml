# general settings
name: test_BI_DiffSR_DDIM_S50_x2
model_type: BIDiffSRModel
scale: 2
num_gpu: 1
manual_seed: 10

# dataset and data loader settings
datasets:
  test_1:
    task: SR
    name: Set5
    type: MultiPairedImageDataset
    dataroot_gt: datasets/benchmark/Set5/HR
    dataroot_lq: datasets/benchmark/Set5/LR_bicubic/X2
    filename_tmpl: '{}x2'
    io_backend:
      type: disk

  test_2:
    task: SR
    name: B100
    type: MultiPairedImageDataset
    dataroot_gt: datasets/benchmark/B100/HR
    dataroot_lq: datasets/benchmark/B100/LR_bicubic/X2
    filename_tmpl: '{}x2'
    io_backend:
      type: disk

  test_3:
    task: SR
    name: Urban100
    type: MultiPairedImageDataset
    dataroot_gt: datasets/benchmark/Urban100/HR
    dataroot_lq: datasets/benchmark/Urban100/LR_bicubic/X2
    filename_tmpl: '{}x2'
    io_backend:
      type: disk

  test_4:
    task: SR
    name: Manga109
    type: MultiPairedImageDataset
    dataroot_gt: datasets/benchmark/Manga109/HR
    dataroot_lq: datasets/benchmark/Manga109/LR_bicubic/X2
    filename_tmpl: '{}_LRBI_x2'
    io_backend:
      type: disk

# network structures
network_g:
  type: BIDiffSRUNet
  in_channel: 6
  out_channel: 3
  inner_channel: 64
  norm_groups: 16
  channel_mults: [1, 2, 4, 8]
  attn_res: []
  res_blocks: 2
  dropout: 0.2
  image_size: 256
  fp_res: [256, 128]
  total_step: 2000
  dynamic_group: 5 # K

# schedule
beta_schedule:
  scheduler_type: DDIM
  schedule: linear
  n_timestep: 2000
  linear_start: !!float 1e-6
  linear_end: !!float 1e-2
  prediction_type: epsilon
  num_inference_steps: 50
  guidance_scale: 7.5
  is_guidance: False

# path
path:
  pretrain_network_g: experiments/pretrained_models/BI_DiffSR_x2.pth
  strict_load_g: true
  resume_state: params

# validation settings
val:
  save_img: true
  suffix: 'test'  # add suffix to saved images, if None, use exp name

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 2
      test_y_channel: true

    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 2
      test_y_channel: true

    lpips: # metric name, can be arbitrary
      type: calculate_lpips
      crop_border: 2
      better: lower
